var fitting = angular.module('fitting_room', ["ngRoute", "ui.bootstrap"]);


    fitting.factory("UserService", function($http, $filter){

        return {

            get_data : function($scope, url) {

                $http.get(url).success(function(data) {
                    $scope.shipment_header = data.shipment_header;
                    $scope.shipment_details = data.shipment_detail;

                });

                },

            set_page: function($scope) {

                $scope.sortingOrder = sortingOrder;
                $scope.reverse = false;
                $scope.filteredItems = [];
                $scope.groupedItems = [];
                $scope.itemsPerPage = 8;
                $scope.pagedItems = [];
                $scope.currentPage = 0;


                var searchMatch = function (haystack, needle) {
                    if (!needle || !haystack) {
                        return false;
                    }
                    return haystack.toLowerCase().lastIndexOf(needle.toLowerCase(),0) !== -1;
                };

                // Filter by status
                $scope.status = function (status) {

                    status = status==null ?  $scope.last_status : status;
                    $scope.last_status = status;
                    $scope.filteredItems = $filter('filter')($scope.items, function (item) {
                        if (searchMatch(item[$scope.filter_from_object][$scope.filter_from_field], status)) {
                            return true;
                        }

                        else {
                            return false;
                        }

                    });
                    // take care of the sorting order
                    if ($scope.sortingOrder !== '') {
                        $scope.filteredItems = $filter('orderBy')($scope.filteredItems, $scope.sortingOrder, $scope.reverse);
                    }
                    $scope.currentPage = 0;
                    groupToPages();
                };


                // calculate page in place
                var groupToPages = function () {
                    $scope.pagedItems = [];

                    for (var i = 0; i < $scope.filteredItems.length; i++) {
                        if (i % $scope.itemsPerPage === 0) {
                            $scope.pagedItems[Math.floor(i / $scope.itemsPerPage)] = [ $scope.filteredItems[i] ];
                        } else {
                            $scope.pagedItems[Math.floor(i / $scope.itemsPerPage)].push($scope.filteredItems[i]);
                        }
                    }
                };

                // init the filtered items
                $scope.search = function (event, search_field) {
					                  
                    if (event.which != 13) {
                        return
                    }

                    $scope.filteredItems = $filter('filter')($scope.items, function (item) {
                        if (searchMatch(item[$scope.filter_from_object][search_field], $scope.query) &&
                                searchMatch(item[$scope.filter_from_object][$scope.filter_from_field], $scope.last_status)) {
                            return true
                        }

                        else {
                            return false;
                        }
                    });
                    // take care of the sorting order
                    if ($scope.sortingOrder !== '') {
                        $scope.filteredItems = $filter('orderBy')($scope.filteredItems, $scope.sortingOrder, $scope.reverse);
                    }
                    $scope.currentPage = 0;
                    // now group by pages
                    groupToPages();
                };

                $scope.range = function (start, end) {
                    var ret = [];
                    if (!end) {
                        end = start;
                        start = 0;
                    }
                    for (var i = start; i < end; i++) {
                        ret.push(i);
                    }
                    return ret;
                };

                $scope.prevPage = function () {
                    if ($scope.currentPage > 0) {
                        $scope.currentPage--;
                    }
                };

                $scope.nextPage = function () {
                    if ($scope.currentPage < $scope.pagedItems.length - 1) {
                        $scope.currentPage++;
                    }
                };

                $scope.setPage = function () {
                    $scope.currentPage = this.n;
                };

                // change sorting order
                $scope.sort_by = function(newSortingOrder) {
                    //if ($scope.sortingOrder == newSortingOrder)
                    $scope.reverse = !$scope.reverse;

                    $scope.sortingOrder = 'shipment_header.'+newSortingOrder;

                    // take care of the sorting order
                    $scope.filteredItems = $filter('orderBy')($scope.filteredItems, $scope.sortingOrder, $scope.reverse);
                    $scope.currentPage = 0;
                    // now group by pages
                    groupToPages();
                };

            }


        }
    });
